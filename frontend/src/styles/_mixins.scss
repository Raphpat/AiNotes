@use 'variables' as *;

// Typography mixins
@mixin heading-1 {
  font-size: map-get($font-sizes, '2xl');
  font-weight: map-get($font-weights, 'semibold');
  color: map-get(map-get($colors, 'text'), 'primary');
  letter-spacing: -0.025em;
}

@mixin heading-2 {
  font-size: map-get($font-sizes, 'lg');
  font-weight: map-get($font-weights, 'semibold');
  color: map-get(map-get($colors, 'text'), 'primary');
}

@mixin body-text {
  font-size: map-get($font-sizes, 'base');
  line-height: 1.5;
  color: map-get(map-get($colors, 'text'), 'secondary');
}

@mixin small-text {
  font-size: map-get($font-sizes, 'sm');
  color: map-get(map-get($colors, 'text'), 'muted');
}

// Layout mixins
@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin grid-auto-fill($min-width: 280px) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: map-get($spacing, 'base');
}

// Component mixins
@mixin card {
  background: white;
  border-radius: map-get($border-radius, 'lg');
  box-shadow: map-get($shadows, 'sm');
  padding: map-get($spacing, 'lg');
}

@mixin button-base {
  width: 100%;
  padding: map-get($spacing, 'sm') map-get($spacing, 'base');
  border: none;
  border-radius: map-get($border-radius, 'base');
  font-family: inherit;
  font-size: map-get($font-sizes, 'base');
  font-weight: map-get($font-weights, 'medium');
  cursor: pointer;
  transition: background-color map-get($transitions, 'fast');
}

@mixin button-primary {
  @include button-base;
  background: map-get(map-get($colors, 'primary'), 'light');
  color: white;

  &:hover:not(:disabled) {
    background: map-get(map-get($colors, 'primary'), 'base');
  }

  &:disabled {
    background: map-get($colors, 'gray', '200');
    cursor: not-allowed;
  }
}

@mixin button-success {
  @include button-base;
  background: map-get(map-get($colors, 'success'), 'light');
  color: white;

  &:hover:not(:disabled) {
    background: map-get(map-get($colors, 'success'), 'base');
  }

  &:disabled {
    background: map-get($colors, 'gray', '200');
    cursor: not-allowed;
  }
}

@mixin input-base {
  width: 100%;
  padding: map-get($spacing, 'sm');
  border: 1px solid map-get($colors, 'gray', '200');
  border-radius: map-get($border-radius, 'base');
  font-family: inherit;
  font-size: map-get($font-sizes, 'base');
  transition: border-color map-get($transitions, 'fast');

  &:focus {
    outline: none;
    border-color: map-get(map-get($colors, 'primary'), 'light');
    box-shadow: 0 0 0 3px rgba(map-get(map-get($colors, 'primary'), 'light'), 0.1);
  }
}

// Media query mixins
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
} 